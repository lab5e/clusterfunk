syntax = "proto3";

package managepb;

option go_package = ".;managepb";

// LeaderManagement service is responsible for node management. Management
// operations must happen on the leader in the cluster.
service ClusterManagement {
  // GetState returns the cluster state of the local node.
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse);

  // ListNodes lists the known nodes in the cluster, as seen by the leader.
  rpc ListNodes(ListNodesRequest) returns (ListNodesResponse);

  // FindEndpoint looks up an endpoint and returns the list. The list is
  // retrieved from the local node.
  rpc FindEndpoint(EndpointRequest) returns (EndpointResponse);

  // ListEndpoints lists all of the endpoints in the cluster that this node
  // knows about. Serf propagation time might make an difference here.
  rpc ListEndpoints(ListEndpointRequest) returns (ListEndpointResponse);

  // AddNode adds a node to the cluster. This request is proxied to the leader
  // if it is received by a non-leader node. The request will fail if there's
  // no current leader in the cluster.
  rpc AddNode(AddNodeRequest) returns (AddNodeResponse);

  // RemoveNode removes a node from the cluster. This request is handled by
  // the leader. If the request is sent to one of the non-leaders in the cluster
  // it will be proxied to the leader.
  rpc RemoveNode(RemoveNodeRequest) returns (RemoveNodeResponse);

  // StepDown causes the (Raft) leader to step down and a new leader will be
  // elected.
  rpc StepDown(StepDownRequest) returns (StepDownResponse);

  // ListShards dumps the current shard map as seen by the node handling the
  // request.
  rpc ListShards(ListShardsRequest) returns (ListShardsResponse);
};

// Errors is the various error codes that might be returned. The values are
// should be fairly obvious.
message Error {
  enum Code {
    UNSPECIFIED = 0;
    OK = 1;
    INVALID = 2;
    NO_LEADER = 3;
    GENERIC = 4;
    UNKNOWN_ID = 5;
  };
  Code error_code = 1;
  string message = 2;
}

// TODO: Document this

// GetStatusRequest
message GetStatusRequest {};

// GetStatusResponse
message GetStatusResponse {
  string local_node_id = 1;
  string leader_node_id = 2;
  int32 raft_node_count = 3;
  int32 serf_node_count = 4;
  string local_role = 5;
  string local_state = 6;
  string cluster_name = 7;
  int32 shard_count = 8;
  int32 shard_weight = 9;
  Error error = 10;
  int64 created = 11;
};

// NodeInfo contains information on a single node in the cluster/swarm
message NodeInfo {
  // NodeId is the node's identifier.
  string node_id = 1;
  string raft_state = 2;
  string serf_state = 3;
  bool leader = 4;
}

// ListNodesRequest
message ListNodesRequest {};

// ListNodesResponse is the response to a ListSerfNodes call. The number of
// Serf nodes will initially be quite small so we won't need a stream response
// here.
message ListNodesResponse {
  string node_id = 1;
  string leader_id = 2;
  repeated NodeInfo nodes = 3;
  Error error = 4;
};

// EndpointRequest is the a request for a list of endpoints
// protolint:disable:next:INDENT
message EndpointRequest {
  string endpoint_name = 1;
}

message EndpointInfo {
  string node_id = 1;
  string name = 2;
  string host_port = 3;
  string service_name = 4;
};

message EndpointResponse {
  string node_id = 1;
  Error error = 2;
  repeated EndpointInfo endpoints = 3;
};

// ListEndpointRequest is a request to list all known endpoints
message ListEndpointRequest {};

// ListEndpointResponse is a list of all known endpoints on this node. There is
// no filtering on the endpoints.
message ListEndpointResponse {
  string node_id = 1;
  Error error = 2;
  repeated EndpointInfo endpoints = 3;
};

// Messages for the AddNode method
message AddNodeRequest {
  string node_id = 1;
};

// AddNodeResponse
message AddNodeResponse {
  string node_id = 1;
  Error error = 2;
};

// RemoveNodeRequest
message RemoveNodeRequest {
  string node_id = 1;
};

// RemoveNodeResponse
message RemoveNodeResponse {
  string node_id = 1;
  Error error = 2;
};

// ListShardsRequest
message ListShardsRequest {};

message ShardInfo {
  string node_id = 1;
  int32 shard_count = 2;
  int32 shard_weight = 3;
};

// ListShardsResponse
message ListShardsResponse {
  string node_id = 1;
  Error error = 2;
  repeated ShardInfo shards = 3;
  int32 total_shards = 4;
  int32 total_weight = 5;
};

message StepDownRequest {};

message StepDownResponse {
  string node_id = 1;
  Error error = 2;
};